/* 1. start by setting to display:flex 
    2. add a max/min width to the items
    3. show how we can change flex direction
    4. show how we can change wrapping
    5. show how we can change how we justify and align items (show both vertical and horizontal)
        a. emphasize how these can be used to easily center content
    6. show order and flex grow*/

/* ~~~ the section we will change for our class notes to apply flexbox / grid starts here! ~~~ */

/* ~~ this is where we apply flexbox styling ~~ */
#my_flexbox{
    display:flex;
    /* flex-direction: column, row, column-reverse or row-reverse; */
    flex-direction: row;
    /* flex-wrap: wrap, nowrap, wrap-reverse */
    flex-wrap: wrap;
    /* justify-content changes how items are aligned
        this applies to the *flex direction* */
    /* justify-content: center, flex-start, flex-end, space-around, or space between */
    justify-content: center;
    /* align-items changes how items are aligned
        this applies to the *opposite of flex direction* */
    /* align-items: center, flex-start, flex-end, stretch, or baseline (centers items) */
    /* show them how to easily center items (justify-content:center + align-content:center) */
}

/* show how to order using order: # property for individual items
order starts at zero

flex-grow: # is the relative width for each individual item*/

#ticket_1{
    /* for flex-grow to work, items must have a set width */
    flex-grow: 2;
    order:1;
}

.info{
    max-width: 30vw;
    min-width: 300px;
}

/* ~~ this is where we apply grid styling ~~ */


/* 1. start by setting display grid
    2. add grid template columns, then rows, then call out how we have overfilled the grid but it still works
    3. show fr unit
    4. show justify content/ align content
        a. show gap
    5. jump back over to the ppt to cover grid-column/grid-row then show example here
    6. jump back over to show grid-area then show example here
    */

/* note, here we have overfilled the grid,
    (providing more rows of content than we defined in css)
    but it keeps tiling following the same pattern by default */
#my_grid{
    display:grid;
    grid-template-columns: auto auto auto auto; /* use fr unit to calculate *relative* widths/heights */
    grid-template-rows: auto auto;

    gap: 20px 50px; /*our row gap is 20px, our column gap is 50px */
    /* justify content is for horizontal alignment */
    /* justify content: space-evenly, space-around, space-between, center, start, end */

    /* align-content is for vertical alignment */
    /* align-content: center, space-evenly, space-around, space-between, start, end */
}

#unicorns_1{
    /* grid-row: span 2;
    grid-column: span 3; */
    grid-area: span 2/span 4;
}